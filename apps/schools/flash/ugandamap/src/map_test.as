package {import com.google.maps.InfoWindowOptions;import com.google.maps.LatLng;import com.google.maps.Map;import com.google.maps.MapEvent;import com.google.maps.MapMouseEvent;import com.google.maps.MapType;import com.google.maps.controls.*;import com.google.maps.overlays.*;import com.google.maps.styles.*;import flash.display.Sprite;import flash.events.*;import flash.external.ExternalInterface;import flash.geom.*;import flash.net.*;	public class map_test extends Sprite	{				var xml:XML;		var urlLoader:URLLoader = new URLLoader();		var map:Map;		public function map_test()		{			map= new Map();  //----------Google Maps API Key below-----------//			map.key = "ABQIAAAAaY4zSgrsxabXJBc58J1tqhT2yXp_ZAY8_ufC3CFXhHIE1NvwkxTr4bwfTN9unO4P0XKt5a4AFAy_Xg";			map.setSize(new Point(stage.stageWidth, stage.stageHeight));			map.addEventListener(MapEvent.MAP_READY, onMapReady);						this.addChild(map);		}		function onMapReady(event:Event):void {						map.removeEventListener(MapEvent.MAP_READY, onMapReady);			map.setCenter(new LatLng(1.164471, 32.453613), 6, MapType.NORMAL_MAP_TYPE);			map.addControl(new ZoomControl());			map.enableScrollWheelZoom();			map.enableContinuousZoom();			urlLoader.addEventListener(Event.COMPLETE, xmlLoaded);			urlLoader.load(new URLRequest("../xml/"));  //<-------------Place the XML URL here------//						if(ExternalInterface.available) {				ExternalInterface.addCallback("receiveNotification",receiveFromJavascript);			}		}		function receiveFromJavascript(value:String):void {			map.clearOverlays();			createMarkers(value);		}		var schools:Array;				function xmlLoaded(event:Event):void {				xml = XML(event.target.data);				schools = new Array();    	        createMarkers("ResponseRate");		}		function createMarkers(value:String) {			var index:int = 0;			for each(var i:XML in xml.School) {								var markerOptions:MarkerOptions = new MarkerOptions();				var theval = i.child(value); 				if(value == "all" || theval.length() == 0)  {        			markerOptions.icon = CustomIcon.unrankedIcon();  				} else {  					var parsed = parseInt(theval);   					if(isNaN(parsed)) {  						markerOptions.icon = CustomIcon.unrankedIcon();  					} else {  						markerOptions.icon = CustomIcon.rankedIcon(parsed);  					}  				}        		markerOptions.tooltip = i.Name;        		markerOptions.iconAlignment = MarkerOptions.ALIGN_HORIZONTAL_CENTER;        		markerOptions.iconOffset = new Point(1, 1);				var markerA:Marker = new Marker(new LatLng(i.@latitude, i.@longitude), markerOptions);				var options:InfoWindowOptions = new InfoWindowOptions({customContent: new IconSpecifics(i),		                                                         		customOffset: new Point(0, 0),		                                                                customCloseRect: new Rectangle(-5, -200, 245, 200)});				markerA.addEventListener(MapMouseEvent.CLICK, closeAroundInfoWindow(options));	  			map.addOverlay(markerA);			}		}			function closeAroundInfoWindow(options:InfoWindowOptions) {			return function showInfoWindow(e:MapMouseEvent):void				{		     		e.currentTarget.openInfoWindow(options);				};		}	}}